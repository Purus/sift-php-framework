<?php
/*
 * This file is part of the Sift package.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

/**
 * Config handler for rich editor
 *
 * @package Sift
 * @subpackage config
 */
class sfRichEditorConfigHandler extends sfSimpleYamlConfigHandler {

  /**
   * Executes the compilation process for given array of files
   *
   * @param array $configFiles
   * @return string
   */
  public function execute($configFiles)
  {
    // parse the yaml
    $myConfig = $this->parseYamls($configFiles);

    if(isset($myConfig['override']))
    {
      $myConfig = $this->mergeOveridesConfig($myConfig, $myConfig['override']);
      unset($myConfig['override']);
    }

    $all = array();
    if(isset($myConfig['all']))
    {
      $all = $this->replaceConstants($myConfig['all']);
      unset($myConfig['all']);
    }

    foreach($myConfig as $section => $value)
    {
      $myConfig[$section] = sfToolkit::arrayDeepMerge($all, self::replaceConstants($value));
    }

    // compile data
    $retval = sprintf("<?php\n"
      . "// auto-generated by sfRichEditorConfigHandler\n"
      . "// date: %s\n\n"
      . "return %s;", date('Y/m/d H:i:s'), $this->varExport($myConfig, true));
    return $retval;
  }

  /**
   * Parses an array of YAMLs files and merges them in one configuration array.
   *
   * @param  array An array of configuration file paths
   *
   * @return array A merged configuration array
   */
  public static function parseYamls($configFiles)
  {
    $config = array();
    foreach($configFiles as $configFile)
    {
      $config = array_merge_recursive($config, self::replaceConstants(self::parseYaml($configFile)));
    }
    return $config;
  }

  /**
   * Merges assets and environement configuration.
   *
   * @param array A configuration array
   */
  protected function mergeOveridesConfig($a1, $a2)
  {
    return self::arrayReplaceRecursive($a1, $a2);
  }

  protected static function arrayReplaceRecursive($array, $array1)
  {
    // handle the arguments, merge one by one
    $args = func_get_args();
    $array = $args[0];
    if(!is_array($array))
    {
      return $array;
    }
    for($i = 1; $i < count($args); $i++)
    {
      if(is_array($args[$i]))
      {
        $array = self::arrayRecurse($array, $args[$i]);
      }
    }
    return $array;
  }

  protected static function arrayRecurse($array, $array1, $override = false)
  {
    foreach($array1 as $key => $value)
    {
      // create new key in $array, if it is empty or not an array
      if(!isset($array[$key]) || (isset($array[$key]) && !is_array($array[$key])))
      {
        $array[$key] = array();
      }
      // overwrite the value in the base array
      if(is_array($value) && count($value))
      {
        if(!$override)
        {
          $value = self::arrayRecurse($array[$key], $value, true);
        }
      }
      $array[$key] = $value;
    }
    return $array;
  }

}
