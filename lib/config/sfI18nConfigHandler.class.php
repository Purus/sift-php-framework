<?php
/*
 * This file is part of the Sift PHP framework.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

/**
 * sfI18nConfigHandler parses i18n.yml configuration files
 *
 * @package    Sift
 * @subpackage config
 */
class sfI18nConfigHandler extends sfSimpleYamlConfigHandler
{
    /**
     * Executes this configuration handler.
     *
     * @param  string An absolute filesystem path to a configuration file
     *
     * @return string Data to be written to a cache file
     *
     * @throws sfConfigurationException If a requested configuration file does not exist or is not readable
     * @throws sfParseException If a requested configuration file is improperly formatted
     */
    public function execute($configFiles)
    {
        // get our prefix
        $prefix = strtolower($this->getParameterHolder()->get('prefix', ''));

        // add dynamic prefix if needed
        if ($this->getParameterHolder()->get('module', false)) {
            $prefix .= "'.strtolower(\$moduleName).'_";
        }

        $myConfig = self::parseYamls($configFiles);

        $myConfig = sfToolkit::arrayDeepMerge(
            isset($myConfig['default']) && is_array($myConfig['default']) ? $myConfig['default'] : array(),
            isset($myConfig['all']) && is_array($myConfig['all']) ? $myConfig['all'] : array(),
            isset($myConfig[sfConfig::get('sf_environment')]) && is_array($myConfig[sfConfig::get('sf_environment')])
                ? $myConfig[sfConfig::get('sf_environment')] : array()
        );

        $values = array();
        foreach ($myConfig as $category => $keys) {
            $category = $prefix . $category;
            $values[$category] = $this->replaceConstants($keys);
        }

        // compile data
        $retval = '';
        if ($values) {
            $retval = "<?php\n" .
                "// auto-generated by sfDefineEnvironmentConfigHandler\n" .
                "// date: %s\nreturn %s;\n";
            $retval = sprintf($retval, date('Y/m/d H:i:s'), $this->varExport($values));
        }

        return $retval;
    }

}
