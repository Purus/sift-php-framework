<?php
/*
 * This file is part of the Sift PHP framework.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

/**
 * sfDimensionsConfigHandler allows you to configure dimensions.
 *
 * @package    Sift
 * @subpackage config
 */
class sfDimensionsConfigHandler extends sfYamlConfigHandler {

  /**
   * Execute this configuration handler.
   *
   * @param array An array of absolute filesystem path to a configuration file.
   *
   * @return string Data to be written to a cache file.
   *
   * @throws sfConfigurationException If a requested configuration file does not exist or is not readable.
   * @throws sfParseException If a requested configuration file is improperly formatted.
   * @throws sfInitializationException If a view.yml key check fails.
   */
  public function execute($configFiles)
  {
    list($available, $default) = $this->parse($configFiles);

    // compile data
    return sprintf("<?php\n" .
                    "// auto-generated by sfDimensionsConfigHandler\n" .
                    "// date: %s\n\n" .
                    "\$this->dimensions = new sfDimensions(%s, %s);\n", date('Y/m/d H:i:s'), 
                    var_export($available, true), var_export($default, true));
  }

  /**
   * Parses the configuration files and returns an array of ($availableDimensions, $defaultDimension)
   * 
   * @param array $configFiles
   * @return array
   */
  public function parse($configFiles)
  {
    // parse the yaml
    $myConfig = self::parseYamls($configFiles);

    $dimensions_available = $myConfig['dimensions'];

    $default_dimension = array();
    foreach($dimensions_available as $dimension)
    {
      $default_dimension[] = array_shift($dimension);
    }

    return array(
        $dimensions_available, $default_dimension
    );
  }

}
