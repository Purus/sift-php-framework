<?php
/*
 * This file is part of the Sift PHP framework.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

/**
 * sfDimensionsConfigHandler allows you to configure dimensions.
 *
 * @package    Sift
 * @subpackage config
 */
class sfDimensionsConfigHandler extends sfYamlConfigHandler
{
  /**
   * Execute this configuration handler.
   *
   * @param array An array of absolute filesystem path to a configuration file.
   *
   * @return string Data to be written to a cache file.
   *
   * @throws sfConfigurationException If a requested configuration file does not exist or is not readable.
   * @throws sfParseException If a requested configuration file is improperly formatted.
   * @throws sfInitializationException If a view.yml key check fails.
   */
  public function execute($configFiles)
  {
    list($available, $default) = $this->parse($configFiles);

    $data[] = sprintf('$this->dimensions = new sfDimensions(%s, %s);', $this->varExport($available), $this->varExport($default));

    // compile data
    return sprintf("<?php\n" .
            "// auto-generated by sfDimensionsConfigHandler\n" .
            "// date: %s\n\n" .
            "%s", date('Y/m/d H:i:s'), join("\n", $data));
  }

  /**
   * Parses the configuration files and returns an array of ($availableDimensions, $defaultDimension)
   *
   * @param array $configFiles
   * @return array
   */
  public function parse($configFiles)
  {
    // parse the yaml
    $myConfig = self::parseYamls($configFiles);

    // normalize key values
    $myConfig = array_change_key_case($myConfig, CASE_LOWER);

    if (!isset($myConfig['available'])) {
      return array(array(), array());
    }

    $available = (array) $myConfig['available'];
    $default = array();
    if (isset($myConfig['default'])) {
      foreach ($myConfig['default'] as $key => $value) {
        $default[$key] = $value;
      }
    } else {
      foreach ($available as $dimension) {
        $default[] = array_shift($dimension);
      }
    }

    return array(
        $available, $default
    );
  }

}
