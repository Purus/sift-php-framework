<?php
/*
 * This file is part of the Sift PHP framework.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

/**
 * sfFactoryConfigHandler allows you to specify which factory implementation the
 * system will use.
 *
 * @package    Sift
 * @subpackage config
 */
class sfFactoryConfigHandler extends sfYamlConfigHandler {

  /**
   * Executes this configuration handler.
   *
   * @param array An array of absolute filesystem path to a configuration file
   *
   * @return string Data to be written to a cache file
   *
   * @throws sfConfigurationException If a requested configuration file does not exist or is not readable
   * @throws sfParseException If a requested configuration file is improperly formatted
   */
  public function execute($configFiles)
  {
    // parse the yaml
    $myConfig = self::parseYamls($configFiles);

    $myConfig = sfToolkit::arrayDeepMerge(
        isset($myConfig['default']) && is_array($myConfig['default']) ? $myConfig['default'] : array(),
        isset($myConfig['all']) && is_array($myConfig['all']) ? $myConfig['all'] : array(),
        isset($myConfig[sfConfig::get('sf_environment')]) && is_array($myConfig[sfConfig::get('sf_environment')]) ? $myConfig[sfConfig::get('sf_environment')] : array()
    );

    // required services
    $requiredServices = array(
      'controller',
      'request',
      'response',
      'storage',
      'user',
      'view_cache',
      'i18n',
      'database_manager',
      'mailer'
    );

    $data = array();

    // first check the required
    foreach($requiredServices as $required)
    {
      if(!isset($myConfig[$required]))
      {
        throw new sfParseException(sprintf('Configuration file "%s" is missing required service "%s" definition.', $configFiles[0], $required));
      }
      elseif(!isset($myConfig[$required]['class']))
      {
        throw new sfParseException(sprintf('Configuration file "%s" specifies category "%s" with missing class key', $configFiles[0], $required));
      }
    }

    foreach($myConfig as $serviceName => $definition)
    {
      $data[] = sprintf("\$this->registerService('%s', %s);\n", $serviceName, $this->varExport($definition));
    }

    // compile data
    $retval = sprintf("<?php\n" .
        "// auto-generated by sfFactoryConfigHandler\n" .
        "// date: %s\n%s\n", date('Y/m/d H:i:s'), implode("\n", $data));

    return $retval;
  }

}
