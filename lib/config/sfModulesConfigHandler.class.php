<?php
/*
 * This file is part of the Sift PHP framework.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

/**
 * sfModulesConfigHandler class.
 *
 * @package    Sift
 * @subpackage config
 */
class sfModulesConfigHandler extends sfSimpleYamlConfigHandler
{
  /**
   * Execute this configuration handler.
   *
   * @param array An array of absolute filesystem path to a configuration file.
   *
   * @return string Data to be written to a cache file.
   *
   * @throws sfConfigurationException If a requested configuration file does not exist or is not readable.
   * @throws sfParseException If a requested configuration file is improperly formatted.
   */
  public function execute($configFiles)
  {
    // set our required categories list and initialize our handler
    // $categories = array('required_categories' => array());
    // $this->initialize($categories);

    // parse the yaml
    $modules = self::parseYamls($configFiles);
    $modules = array_map('trim', array_unique($modules));

    // sort alphabetically
    asort($modules);

    // init our data array
    $data   = array();
    $data[] = '// Atomatically enable these modules: ';    
    $data[] = sprintf('$modules = %s;', var_export($modules, true));
    $data[] = '// merge with currently enabled modules';
    $data[] = 'sfConfig::set(\'sf_enabled_modules\', array_merge(sfConfig::get(\'sf_enabled_modules\', array()), $modules));';

    // compile data
    $retval = sprintf("<?php\n".
                      "// auto-generated by sfModulesConfigHandler\n".
                      "// date: %s\n".
                      "%s",
                      date('Y/m/d H:i:s'), join("\n", $data));
    return $retval;
  }

  /**
   * Parses an array of YAMLs files and merges them in one configuration array.
   *
   * @param  array An array of configuration file paths
   *
   * @return array A merged configuration array
   */
  public static function parseYamls($configFiles)
  {
    $config = array();
    foreach ($configFiles as $configFile)
    {
      // we use php's builtin array_merge instead of sfToolkit::arrayDeepMerge()
      // because we have the same keys in our array and they are lost with deep merge!
      $config = array_merge($config, self::parseYaml($configFile));
    }
    return $config;
  }

}
